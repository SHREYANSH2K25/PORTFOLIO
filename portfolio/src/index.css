/*
   Import TailwindCSS core utilities 
   This brings in Tailwind’s default reset, base styles, 
   and utility classes so we can build on top of them.
 */
@import "tailwindcss";

@theme {
  /*
     Why: Instead of hardcoding colors or animations every 
     time, we store them in CSS custom properties (variables). 
     That way, if we want to change a color/animation later, 
     we just update it here once.
   */

  /* Colors – all use HSL because HSL makes it easier to 
     adjust hue/saturation/lightness dynamically */
  --color-border: hsl(var(--border));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));
  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));
  --color-card: hsl(var(--card));

  /* Animations – instead of writing long animation 
     definitions in every class, we store them as variables. 
     These can then be applied to elements quickly. */
  --animate-float: float 6s ease-in-out infinite;
  --animate-pulse-subtle: pulse-subtle 4s ease-in-out infinite;
  --animate-fade-in: fade-in 0.7s ease-out forwards;
  --animate-fade-in-delay-1: fade-in 0.7s ease-out 0.2s forwards;
  --animate-fade-in-delay-2: fade-in 0.7s ease-out 0.4s forwards;
  --animate-fade-in-delay-3: fade-in 0.7s ease-out 0.6s forwards;
  --animate-fade-in-delay-4: fade-in 0.7s ease-out 0.8s forwards;
  --animate-meteor: meteor 5s linear infinite;

  /*
     Why: Keyframes describe "how" an animation progresses 
     from start → middle → end. Above, we only stored the 
     timing; here, we define the actual movement or effect.
  */

  /* Floating animation: makes elements gently move up 
     and down to create a "floating in space" feel */
  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  /* Pulse animation: used for background stars or subtle 
     glow effects. Their opacity cycles so they "twinkle". */
  @keyframes pulse-subtle {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }

  /* Fade-in animation: commonly applied to text or sections 
     when they first appear on screen, so content enters 
     smoothly instead of just popping in. */
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Meteor animation: simulates a shooting star. 
     We rotate it and translate across X axis, while 
     fading it out towards the end. */
  @keyframes meteor {
    0% {
      transform: rotate(215deg) translateX(0);
      opacity: 1;
    }
    70% {
      opacity: 1; /* still visible midway */
    }
    100% {
      transform: rotate(215deg) translateX(-500px);
      opacity: 0; /* disappears at end */
    }
  }
}

/*
  BASE LAYER
   Why: Tailwind allows us to define a "base" set of 
   variables/styles that apply to the entire project. 
   Here we define light theme (:root) and dark theme (.dark).
 */

@layer base {
  :root {
    /* Light mode theme colors */
    --background: 210 40% 98%;
    --foreground: 222 47% 11%;
    --card: 0 0% 100%; 
    --primary: 250 47% 60%;
    --primary-foreground: 210 40% 98%;
    --border: 214 32% 91%;
  }

  .dark {
    /* Dark mode theme colors (overrides above when .dark 
       is present on <html> or <body>) */
    --background: 222 47% 4%;
    --foreground: 213 31% 91%;
    --card: 222 47% 8%;
    --primary: 250 65% 65%;
    --primary-foreground: 213 31% 91%;
    --border: 217 33% 20%;
  }

  * {
    /* applied color on border using border(color we defined above) */
    @apply border-border;
  }

  html {
    @apply scroll-smooth;
  }

  body {
    @apply bg-background text-foreground transition-colors duration-300;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

/*
  CUSTOM UTILITY CLASSES
   Why: Tailwind already has many utilities, but sometimes 
   we need reusable effects (like glowing text or gradient 
   borders). Defining them here lets us write <div class="card-hover"> 
   instead of repeating the same CSS everywhere.
 */

/* Container utility: centralizes content with responsive max widths */
@utility container {
  margin-inline: auto; /* centers horizontally */
  padding-inline: 2rem; /* consistent left/right padding */

  /* Responsive max widths – mimicking Tailwind's container */
  @media (width >= 640px) { max-width: 640px; }
  @media (width >= 768px) { max-width: 768px; }
  @media (width >= 1024px) { max-width: 1024px; }
  @media (width >= 1280px) { max-width: 1280px; }
  @media (width >= 1400px) { max-width: 1400px; }
}

/* Text glow: makes headings or special text pop */
@utility text-glow {
  @apply relative; /* keep pseudo elements relative */
  text-shadow: 0 0 10px rgba(167, 139, 250, 0.5); /* glowing edge */
}

/* Card hover: gives UI cards a smooth hover scale + shadow */
@utility card-hover {
  @apply transition-transform duration-300 hover:scale-[1.02] hover:shadow-lg;
}

/* Gradient border: stylish border effect for cards/buttons */
@utility gradient-border {
  @apply relative rounded-md;  /*rounded + positioning */
  background: linear-gradient(to right, hsl(var(--card)), hsl(var(--card)));
  background-clip: padding-box; /* ensures gradient stays inside border */
  border: 1px solid transparent; /* placeholder for gradient effect */
}

@utility cosmic-button {
  @apply px-6 py-2 rounded-full bg-primary text-primary-foreground font-medium 
         transition-all duration-300 hover:shadow-[0_0_10px_rgba(139,92,246,0.5)]
         hover:scale-105 active:scale-95;
}

/* Star utility: used in animated backgrounds, tiny glowing dots */
@utility star {
  @apply absolute rounded-full bg-white;
  box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.4); /* glowing effect */
}

/* Meteor utility: creates streaking star shapes */
@utility meteor {
  @apply absolute bg-linear-to-r from-white via-white to-transparent rounded-full;
  box-shadow: 0 0 10px 5px rgba(255, 255, 255, 0.3);
}

/* Root element (usually #root in React/Vite apps).
   Why: Centers everything and removes unwanted spacing. */
#root {
  max-width: 100%;
  margin: 0 auto;
  padding: 0;
  text-align: center;
}
